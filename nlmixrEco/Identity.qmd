## Requirements

I would encourage you to go through this exercise:\
\
1) Generate a set of "perfect" PK data (central compartment concentration only) by simulating a two-compartment model. For the sake of simplicity, do not add noise to the data. So you know the true parameter values.\
2) Fit the data to a two-compartment model using the FME package - can you recover the true parameter values?\
3) Using FME, calculate the collinearity for pairs / groups of parameters. Are they collinear?\
4) Perform MCMC simulation with FME - can you recover the true parameter values? Are parameters all identifiable?\

```{r}
# step one

## load the required libraries
library(nlmixr2)
library(rxode2)

library(lattice)
library(gridExtra)
######################################################################
## Simulation of a single (warfarin concentration) curve with a single dose    ##
##                                                                             ##
#################################################################################

## set up the system of differential equations (ODEs)
odeKA1 <- "
 d/dt(depot)   = -ka*depot;
 d/dt(central) =  ka*depot-(CL/Vc)*central-(Q/Vc)*central+(Q/Vp)*peri;
 d/dt(peri) = (Q / Vc) * central - (Q / Vp) * peri
 C1=central/Vc;
"

## compile the model
modKA1 <- rxode2(model = odeKA1)

## provide the parameter values to be simulated:
Params <- c(
 ka = log(2) / 3, # 1/h (aborption half-life of 3 hours)
 CL = 0.135,        # L/h
 Vc = 8,              # L
 Vp = 10,              # L
 Q = 0.09              # L
)

## create an empty event table that stores both dosing and sampling information :
ev <- eventTable()

## add a dose to the event table:
ev$add.dosing(dose = 500) #mg
              
## add time points to the event table where concentrations will be simulated; these actions are cumulative
ev$add.sampling(seq(0, 24, 2))

## Then solve the system
##
## The output from rxSolve is a solved RxODE object,
##  but by making it a data.frame only the simulated values are kept:
Res<-data.frame(rxSolve(modKA1,Params,ev))

## then plot the simulated outcomes in the compartments:
## the amounts in the depot compartment
p1 <- xyplot(depot~time,data=Res,type='l',lwd=2, main = "depot compartment")
## the concentrations in the central compartment
p2 <- xyplot(C1~time,data=Res,type='l',lwd=2, main = "central compartment")

grid.arrange(p1,p2, ncol = 2)

```

```{r}
simulated_data = Res[,c('time','C1','depot')]
head(simulated_data,5)
```

```{r}
# step two 
# fit simulated data with FME.

library(FME)

#code chunk number 2: FME.Rnw:349-370

HIV_R <- function (pars, V_0 = 50000, dV_0 = -200750, T_0 = 100) {

  derivs <- function(time, y, pars) {
    with (as.list(c(pars, y)), {
      dT <- lam - rho * T - bet * T * V
      dI <- bet * T * V - delt * I
      dV <- n * delt * I - c * V - bet * T * V

      return(list(c(dT, dI, dV), logV = log(V)))
    })
  }

  # initial conditions
  I_0   <- with(as.list(pars), (dV_0 + c * V_0) / (n * delt))
  y     <- c(T = T_0, I = I_0, V = V_0)

  times <- c(seq(0, 0.8, 0.1), seq(2, 60, 2))
  out   <- ode(y = y, parms = pars, times = times, func = derivs)

  as.data.frame(out)
}


pars <- c(bet = 0.00002, rho = 0.15, delt = 0.55, c = 5.5, lam = 80, n = 900) 

out <- HIV_R(pars = pars)

head(out)
```
